# something to dialog with Vault
#!/usr/bin/env python
import os

import hvac

import argparse
import sys


def checkArg(arg):
    if not arg:
        message = "%s is not definied please set it with argument --%s" % (arg, arg)
        raise ValueError(message)


def readVaultKeyPassword(vaultClient, key):
    if not key:
        raise ValueError("Key is not definied please set it with argument --key")
    readValue = vaultClient.read('secret/' + key)
    print "[VAULT] key:{%s} readValue:{%s}" % (key, readValue)


def writeVaultKeyPassword(vaultClient, key, password):
    if not key:
        raise ValueError("Key is not definied please set it with argument --key")
    if not password:
        raise ValueError("Password is not definied please set it with argument --pass")
    secretkey = 'secret/' + key
    vaultClient.write(secretkey, password=password)
    print "[VAULT] value {%s} created" % (vaultClient.read('secret/foo'))


def deleteVaultKeyPassword(vaultClient, key):
    if not key:
        raise ValueError("Key is not definied please set it with argument --key")
    vaultClient.delete('secret/' + key)
    print "[VAULT] key:{%s}" % (key)


def authenticateToVaultToken(client, token):
    if not token:
        raise ValueError("token is not definied please set it with argument --token")
    client.token = token
    assert client.is_authenticated()


def logOutVault(client):
    # Logout
    client.logout()


def initVault(client):
    assert not client.is_initialized()
    shares = 5
    threshold = 3
    result = client.initialize(shares, threshold)
    # register the root token generated by the init and all the 5 keys
    root_token = result['root_token']
    keys = result['keys']
    print "[VAULT] is Vault initialized:{%s}" % (client.is_initialized())
    print "[VAULT] current sealed status:{%s}" % (str(client.is_sealed()))
    return (root_token, keys)


def unsealVaultWithIndividualKeys(client, unsealkeys):
    keys = unsealkeys.split(",")
    if type(keys) is list:
        # unseal with individual keys (3 of 5 needed)
        for key in keys:
            client.unseal(key.decode('utf-8'))
    print "[VAULT] current sealed status:{%s}" % (str(client.is_sealed()))


def unsealVaultWithMultiKeys(client, unsealkeys):
    # unseal with multiple keys until threshold met
    client.unseal_multi(unsealkeys)
    print "[VAULT] current sealed status:{%s}" % (str(client.is_sealed()))


def sealVault(client):
    client.seal()
    print "[VAULT] current sealed status:{%s}" % (str(client.is_sealed()))


def main():
    parser = argparse.ArgumentParser(prog='script_runner.py')
    parser.add_argument('--read', action='store_true', default=False)
    parser.add_argument('--write', action='store_true', default=False)
    parser.add_argument('--delete', action='store_true', default=False)
    parser.add_argument('--unseal', action='store_true', default=False)
    parser.add_argument('--seal', action='store_true', default=False)
    parser.add_argument('--issealed', action='store_true', default=False)
    parser.add_argument('--init', action='store_true', default=False)
    parser.add_argument('--vaultToken', dest="vaultToken", default=False)
    parser.add_argument('--tlsmode', action='store_true', default=False)
    parser.add_argument('-v', '--vault_host_addr', dest="vaultAddr",
                        help="Set the vault host address")
    parser.add_argument('-user', '--vault_user', dest="vaultUser",
                        help="Set the vault user", default=False)
    parser.add_argument('-pass', '--vault_password', dest="vaultPass",
                        help="Set the vault password", default=False)
    parser.add_argument('-kv', '--key_value', dest="keyValue",
                        help="Key value to write in vault", default=False)
    parser.add_argument('-k', '--key', dest="key",
                        help="keys to read in Vault", default=False)
    parser.add_argument('-u', '--unsealkeys', dest="unsealkeys",
                        help="Keys to unseal vault", default=False)

    args = parser.parse_args()
    vaultAddr = args.vaultAddr
    if not vaultAddr:
        vaultAddr = "http://localhost:8200"
    else:
        vaultAddr = vaultAddr + ":8200"
    print "[VAULT] using vault server adress:{%s}" % (vaultAddr)
    return_code = -1
    vaultToken = args.vaultToken
    if not vaultToken and args.tlsmode:
        client = hvac.Client(url=vaultAddr)
    elif not vaultToken and not args.tlsmode:
        vaultToken = os.environ['VAULT_TOKEN']
        if not vaultToken:
            raise ValueError("vault Token need to be registred")
    else:
        client = hvac.Client(url=vaultAddr, token=vaultToken)

    if args.init:
        initVault(client)
    elif args.read:
        readVaultKeyPassword(client, args.key)
    elif args.write:
        writeVaultKeyPassword(client, args.key, args.keyValue)
    elif args.delete:
        deleteVaultKeyPassword(client, args.key)
    elif args.unseal:
        if not client.is_sealed():
            print "[VAULT ERRORS] Client is NOT sealed"
            sys.exit(return_code)
        if not args.unsealkeys:
            print "[VAULT ERRORS] No unseal keys!"
            sys.exit(return_code)
        unsealVaultWithIndividualKeys(client, args.unsealkeys)

    elif args.seal:
        if not client.is_sealed():
            sealVault(client)

    elif args.issealed:
        print "[VAULT] current sealed status:{%s}" % str(client.is_sealed())


if __name__ == "__main__":
    main()
